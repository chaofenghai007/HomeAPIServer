//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleImgMatchThread.ServiceReference118 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MatchedImageResult", Namespace="http://schemas.datacontract.org/2004/07/ImageAnalysis")]
    [System.SerializableAttribute()]
    public partial class MatchedImageResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private ConsoleImgMatchThread.ServiceReference118.MatchedImage[] MatchedImagesk__BackingFieldField;
        
        private int PageIndexk__BackingFieldField;
        
        private int PageSizek__BackingFieldField;
        
        private int TotalCountk__BackingFieldField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<MatchedImages>k__BackingField", IsRequired=true)]
        public ConsoleImgMatchThread.ServiceReference118.MatchedImage[] MatchedImagesk__BackingField {
            get {
                return this.MatchedImagesk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.MatchedImagesk__BackingFieldField, value) != true)) {
                    this.MatchedImagesk__BackingFieldField = value;
                    this.RaisePropertyChanged("MatchedImagesk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<PageIndex>k__BackingField", IsRequired=true)]
        public int PageIndexk__BackingField {
            get {
                return this.PageIndexk__BackingFieldField;
            }
            set {
                if ((this.PageIndexk__BackingFieldField.Equals(value) != true)) {
                    this.PageIndexk__BackingFieldField = value;
                    this.RaisePropertyChanged("PageIndexk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<PageSize>k__BackingField", IsRequired=true)]
        public int PageSizek__BackingField {
            get {
                return this.PageSizek__BackingFieldField;
            }
            set {
                if ((this.PageSizek__BackingFieldField.Equals(value) != true)) {
                    this.PageSizek__BackingFieldField = value;
                    this.RaisePropertyChanged("PageSizek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<TotalCount>k__BackingField", IsRequired=true)]
        public int TotalCountk__BackingField {
            get {
                return this.TotalCountk__BackingFieldField;
            }
            set {
                if ((this.TotalCountk__BackingFieldField.Equals(value) != true)) {
                    this.TotalCountk__BackingFieldField = value;
                    this.RaisePropertyChanged("TotalCountk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MatchedImage", Namespace="http://schemas.datacontract.org/2004/07/ImageAnalysis")]
    [System.SerializableAttribute()]
    public partial class MatchedImage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ResultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string File {
            get {
                return this.FileField;
            }
            set {
                if ((object.ReferenceEquals(this.FileField, value) != true)) {
                    this.FileField = value;
                    this.RaisePropertyChanged("File");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference118.IImageAnalysisService")]
    public interface IImageAnalysisService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageAnalysisService/MatchImage", ReplyAction="http://tempuri.org/IImageAnalysisService/MatchImageResponse")]
        ConsoleImgMatchThread.ServiceReference118.MatchedImageResult MatchImage(string source, double ratio, string category, int pageIndex, int pageSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageAnalysisService/MatchImage", ReplyAction="http://tempuri.org/IImageAnalysisService/MatchImageResponse")]
        System.Threading.Tasks.Task<ConsoleImgMatchThread.ServiceReference118.MatchedImageResult> MatchImageAsync(string source, double ratio, string category, int pageIndex, int pageSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageAnalysisService/GetCategories", ReplyAction="http://tempuri.org/IImageAnalysisService/GetCategoriesResponse")]
        string[] GetCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageAnalysisService/GetCategories", ReplyAction="http://tempuri.org/IImageAnalysisService/GetCategoriesResponse")]
        System.Threading.Tasks.Task<string[]> GetCategoriesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IImageAnalysisServiceChannel : ConsoleImgMatchThread.ServiceReference118.IImageAnalysisService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImageAnalysisServiceClient : System.ServiceModel.ClientBase<ConsoleImgMatchThread.ServiceReference118.IImageAnalysisService>, ConsoleImgMatchThread.ServiceReference118.IImageAnalysisService {
        
        public ImageAnalysisServiceClient() {
        }
        
        public ImageAnalysisServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ImageAnalysisServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImageAnalysisServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImageAnalysisServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ConsoleImgMatchThread.ServiceReference118.MatchedImageResult MatchImage(string source, double ratio, string category, int pageIndex, int pageSize) {
            return base.Channel.MatchImage(source, ratio, category, pageIndex, pageSize);
        }
        
        public System.Threading.Tasks.Task<ConsoleImgMatchThread.ServiceReference118.MatchedImageResult> MatchImageAsync(string source, double ratio, string category, int pageIndex, int pageSize) {
            return base.Channel.MatchImageAsync(source, ratio, category, pageIndex, pageSize);
        }
        
        public string[] GetCategories() {
            return base.Channel.GetCategories();
        }
        
        public System.Threading.Tasks.Task<string[]> GetCategoriesAsync() {
            return base.Channel.GetCategoriesAsync();
        }
    }
}
